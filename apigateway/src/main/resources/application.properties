server.port=8060
spring.application.name=apigateway

#When not running with docker compose this will work
#eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# When runs with docker compose we need to make changes
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/

eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.instance.preferIpAddress=true
eureka.instance.instanceId=${spring.application.name}:${server.port}

spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Spring Cloud Gateway Configuration
spring.cloud.gateway.routes[0].id=userservice
#spring.cloud.gateway.routes[0].uri=http://eureka-server:8071 
#need to use lb://userservice because of correct mapping with eureka-server
spring.cloud.gateway.routes[0].uri=lb://userservice 
#spring.cloud.gateway.routes[0].uri=http://localhost:8071
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/**
spring.cloud.gateway.routes[0].filters[0]= AuthenticationFilter

spring.cloud.gateway.routes[1].id=productservice
#spring.cloud.gateway.routes[1].uri=http://eureka-server:8072
spring.cloud.gateway.routes[1].uri=lb://productservice
#spring.cloud.gateway.routes[1].uri=http://localhost:8072
spring.cloud.gateway.routes[1].predicates[0]=Path=/products/**
spring.cloud.gateway.routes[1].filters[0]= AuthenticationFilter

spring.cloud.gateway.routes[2].id=spring-security-jwt
#spring.cloud.gateway.routes[2].uri=http://eureka-server:8093
spring.cloud.gateway.routes[2].uri=lb://spring-security-jwt
#spring.cloud.gateway.routes[2].uri=http://localhost:8093
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/**,/authenticate/**

#spring.cloud.gateway.routes[2].predicates[1]=Path=/authenticate/**

#spring.cloud.gateway.routes[3].id=identity-service
#spring.cloud.gateway.routes[3].uri=http://localhost:9898
#spring.cloud.gateway.routes[3].predicates[0]=Path=/auth/**
